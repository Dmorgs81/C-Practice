#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define WORD "Diplodocus"
#define ROWS 2
#define COLS 2

//Little Program Using Malloc
/*
int main(void)
{
    
    char *Storage = malloc(strlen(WORD)+1);
    strcpy(Storage, WORD);
    printf("%s", Storage);
    free(Storage);
    return 0;
    
}
*/

/*int main(void)
{
    int number = 5;
    changenumber(number);
    printf("%d", number);
}

void changenumber(int *number)
{
    *number = 10;
}
*/

/*int main(void)
{
    int myArray[4][4];
    initializeArray(myArray);
}

void initializeArray()
{
    int *myArray = &myArray;
    *myArray[4][4] = {
    {2,4,5,6},
    {5,4,2,1},
    {5,3,2,1},
    {1,8,9,2}
    };
}

int printArray(myArray)
{
    for(int i = 0; i<4; i++)
    {
        for(int j = 0; j < 4; j++)
        {
            printf("%d", myArray[i][j]);
        }
    }
}
*/



//Simple program to check numbers in array and whether they are even or not
/*
int main(void)
{
    int arr[5][5] = {{4,5,4,2,1},{7,1,3,2,1},{10,21,22,98,34},{76,32,12,5,29},{55,653,234,2342,12}};
    for(int i = 0; i < 5; i++)
    {
        for(int j = 0; j < 5; j++)
        {
            (arr[i][j] % 2 == 0) ? printf("\n the number %d is even",arr[i][j]) : printf("\n the number %d is odd", arr[i][j]);
        }
    }
}
*/

//My Attempt at trying to copy an int in Malloc Storage
/*
int main(void)
{
    int *Storage = malloc(sizeof(int));
    int numbers[] = {1,2,3,4,5};
   //can't figure out the int strcpy() (Storage, numbers);
    free(Storage);
}
*/

//Trying to figure out some struct stuff
/*
int main(void)
{
    
}

struct character
{
    int damage = 4;

}
*/

//Messing Around with Malloc and Pointing Address of them
/*
int main(void)
{
    char *Storage = malloc(strlen(WORD));
    strcpy(Storage, WORD);
    printf("%s", Storage);
    free(Storage);
    printf("\nThe address of Storage in Memory %p", &Storage);
    char **PtRStorage = &Storage;
    printf("\nThe address of a pointer to Storage in Memory %p", &PtRStorage);
}
*/


//Forgetting to put a break under a switch causes it to fall through
/*int main(void)
{
    int x = 1;
    switch(x)
    {
    case 1:
    printf("Case 1");
    case 2:
    printf("\nCase 2");
    case 3:
    printf("\nCase 3");
    case 4:
    printf("\nCase 4");
    }
}
*/


//Inefficient Way for Calculating Divisibility
/*
int main(void)
{
    for(int i = 0; i < 20; i++)
    {
        if(i%2 == 0)
        {
            printf("\n%d is divisible by 2 and it's %d", i, i/2);
        }
        else
        {
            printf("\n%d is not divisible by 2", i);
        }
        if(i%3 == 0)
        {
            printf("\n%d is divisible by 3 and it's %d", i, i/3);
        } 
        else
        {
            printf("\n%d is not divisible by 3", i);
        }
        if(i%4 == 0)
        {
            printf("\n%d is divisible by 4 and it's %d", i, i/4);
        } 
        else
        {
            printf("\n%d is not divisible by 4", i);
        }
        if(i%5 == 0)
        {
            printf("\n%d is divisible by 5 and it's %d", i, i/5);
        } 
        else
        {
            printf("\n%d is not divisible by 5", i);
        }
        if(i%6 == 0)
        {
            printf("\n%d is divisible by 6 and it's %d", i, i/6);
        } 
        else
        {
            printf("\n%d is not divisible by 6", i);
        }
        if(i%7 == 0)
        {
            printf("\n%d is divisible by 7 and it's %d", i, i/7);
        } 
        else
        {
            printf("\n%d is not divisible by 7", i);
        }
        if(i%8 == 0)
        {
            printf("\n%d is divisible by 8 and it's %d", i, i/8);
        } 
        else
        {
            printf("\n%d is not divisible by 8", i);
        }
        if(i%9 == 0)
        {
            printf("\n%d is divisible by 9 and it's %d", i, i/9);
        } 
        else
        {
            printf("\n%d is not divisible by 9", i);
        }
         if(i%10 == 0)
        {
            printf("\n%d is divisible by 10 and it's %d", i, i/10);
        } 
        else
        {
            printf("\n%d is not divisible by 10", i);
        }
    }
}
*/

//Failed Attempt at Dividing Stuff by Each other
/*
int main(void)
{
    for(int i = 0; i < 100; i++)
    {
        for(int j = 0; j < 10; j++)
        {
            if(i%j==0)
            {
                printf("\n%d is divisible by %d and it's %d", i,j,i/j);
            }
            else
            {
                printf("\n%d is not divisible by %d", i, j);
            }
        }
    }
}
*/

//Most people would think this initializes x to 0, but it's a random value floating in memory

/*
int main(void)
{
    int x,y;
    x = y - 2;
    printf("%d",x);
}
*/

//Corrected Code which prints out -2
/*
int main(void)
{
    int x,y = 0;
    x = y - 2;
    printf("%d", x);
}
*/


//Anything Uninitilized is Auto Set to 0
/*
int main(void)
{
    int arr[10] = {1,2,3,4};
    for(int i = 0; i < 10; i++)
    {
        printf("\narray[%d] = %d",i,arr[i]);
    }
}
*/

